mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=10, nu = 0.9)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=10, nu = 0.9, cachesize = 40, tolerance = 0.001, epsilon = 0.1)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=10, nu = 0.9, cachesize = 100, tolerance = 0.1, epsilon = 0.5)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
library(FSelector)   #load the feature-selection library
feature_selector <- function(data)
{
#calculate the information gain of each feature
weights <- information.gain(SalePrice~., data)
print(weights)
return(weights)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#calculate the information gain of each feature
weights <- feature_selector(train)
#select top features
subset <- cutoff.k(weights, 5)
#print the results
f <- as.simple.formula(subset, "Features")
print(f)
library(FSelector)   #load the feature-selection library
feature_selector <- function(data)
{
#calculate the information gain of each feature
weights <- information.gain(SalePrice~., data)
return(weights)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#calculate the information gain of each feature
weights <- feature_selector(train)
print(weights)
weights[weights[,'attr_importance'] > 0.1]
View(weights)
weights[weights[,"attr_importance"] > 0.1]
weights[weights['attr_importance'] > 0.1]
weights[weights[,'attr_importance'] > 0.1,]
re = weights[weights[,'attr_importance'] > 0.1,]
for (i in 1:nrow(train)) {
print(train[i, "attr_importance"])
# do more things with the data frame...
}
for (i in 1:nrow(train)) {
print(train[i, 1])
# do more things with the data frame...
}
for (i in 1:nrow(weights)) {
print(weights[i, 1])
# do more things with the data frame...
}
for (i in 1:nrow(weights)) {
row.names(i);
print(weights[i, 1]);
# do more things with the data frame...
}
for (i in 1:nrow(weights)) {
print(row.names(i));
print(weights[i, 1]);
# do more things with the data frame...
}
print(row.names(weights));
for (i in 1:nrow(weights)) {
print(row_names[i, 1])
print(weights[i, 1]);
# do more things with the data frame...
}
row_names = print(row.names(weights));
print(row_names[i, 1])
for (i in 1:nrow(weights)) {
print(row_names[i, 1])
print(weights[i, 1]);
# do more things with the data frame...
}
for (i in 1:nrow(weights)) {
print(row_names[i])
print(weights[i, 1]);
# do more things with the data frame...
}
for (i in 1:nrow(weights))
{
if (weights[i, 1] > 0.1)
print(row_names[i])
print(weights[i, 1]);
}
for (i in 1:nrow(weights))
{
if (weights[i, 1] > 0.1)
{
print(row_names[i])
print(weights[i, 1]);
}
}
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
weights <- information.gain(SalePrice~., data)
#print every feature with IF higher than 0.1
for (i in 1:nrow(weights))
{
if (weights[i, 1] > 0.1)
{
print(row_names[i])
print(weights[i, 1]);
}
}
return(weights)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
weights <- information.gain(SalePrice~., data)
#print every feature with IF higher than 0.1
for (i in 1:nrow(weights))
{
if (weights[i, 1] > 0.1)
{
print(row_names[i])
print(weights[i, 1]);
}
}
return(weights)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
return(features)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
}
}
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
}
}
return(features)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
#print every feature with IF higher than 0.1
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
}
}
return(features)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
df<-data.frame("hi","bye")
View(df)
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
features = feature_selector(train)
View(features)
View(df)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result = dataframe()
df<-data.frame("feature_name","feature_gain")
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
df <- c(row_names[i], features[i, 1])
}
}
return(df)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
features = feature_selector(train)
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
df<-data.frame("feature_name","feature_gain")
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
df <- rbind( df, data.frame(row_names[i], features[i, 1]))
}
}
return(df)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
df<-data.frame("feature_name","feature_gain")
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
df <- rbind( df, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
return(df)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
result<-data.frame("feature_name","feature_gain")
result <- rbind( df, data.frame("feature_name"= "a", "feature_gain" = 2))
View(df)
View(result)
result <- rbind( df, data.frame("X.feature_name"= "a", "X.feature_gain" = 2))
result<-data.frame(feature_name, feature_gain)
result<-data.frame("feature_name"= "a", "feature_gain" = 2)
result <- rbind( df, data.frame("feature_name"= "a", "feature_gain" = 2))
result <- rbind( result, data.frame("feature_name"= "a", "feature_gain" = 2))
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result<-data.frame("feature_name", "feature_gain")
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
result<-data.frame("feature_name" = "a", "feature_gain" = 0.2)
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
return(result)
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result<-data.frame("feature_name" = "a", "feature_gain" = 0.2)
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
return(result)
}
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result<-data.frame("feature_name" = "a", "feature_gain" = 0.2)
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result<-data.frame("feature_name", "feature_gain")
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
#result<-data.frame("feature_name", "feature_gain")
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
#result<-data.frame("feature_name", "feature_gain")
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
View(features)
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
features = feature_selector(train)
result = data.frame()
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result = data.frame()
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
result = result[order(2), ]
result = result[order(feature_gain), ]
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result = data.frame()
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
