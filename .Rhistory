which.max(p)
f = data.frame(s1 = p)
plot(1:1459, p)
p = abs(predicted_svm2 - predicted_lazy)
which.max(p)
f = data.frame(s1 = p)
plot(1:1459, p)
predicted_svm2 = c(predicted_svm[1:699], 200000, 200000, predicted_svm[701:1458])
predicted = predicted_tree * w1 + predicted_lazy * w2 + predicted_svm2 * w3
p = abs(predicted_svm2 - predicted_lazy)
which.max(p)
f = data.frame(s1 = p)
plot(1:1459, p)
test[[2]]
test[2]
test[2,]
prediction = test[i, ]
prediction = test[2, ]
predicted_svm = predict(svm_model, prediction)
is.nan(predicted_svm)
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (is.nan(predicted_svm))
print(i)
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (is.nan(predicted_svm))
print(2)
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (is.nan(predicted_svm))
print(2)
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
#if (is.nan(predicted_svm))
print(predicted_svm)
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
#if (is.nan(predicted_svm))
print(predicted_svm)
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (is.nan(predicted_svm) == 0)
print(predicted_svm)
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (is.nan(predicted_svm) == 0)
{
print(predicted_svm)
}
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (predicted_svm == 0)
{
print(predicted_svm)
}
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (predicted_svm == 0)
{
print(2)
}
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
typeof(predicted_svm)
}
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(typeof(predicted_svm))
}
}
typeof(2.0)
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (typeof(predicted_svm) != typeof(2.0))
{
print(typeof(predicted_svm))
}
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
}
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
}
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
}
}
predicted_svm2 = c(predicted_svm[1:699], 200000, 200000, predicted_svm[701:1458])
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
}
}
r = c()
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
}
}
last = 0
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
print('!!!!!!')
}
}
last = length(r)
}
r = c()
last = 0
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
print('!!!!!!')
}
}
last = length(r)
}
r = c()
last = 0
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
print('!!!!!!')
}
}
last = length(r)
}
r = c()
last = 0
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
print('!!!!!!')
}
}
last = length(r)
}
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
}
}
last = length(r)
}
r = c()
last = 0
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
}
}
last = length(r)
}
r = c()
last = 0
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
}
}
last = length(r)
}
r = c()
last = 0
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
}
}
last = length(r)
}
r = c()
last = 0
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
print(i)
print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
}
}
last = length(r)
}
r = c()
last = 0
for (i in 1:1459)
r = c()
last = 0
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
#print(i)
#print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
r = c(r, 200000)
}
}
last = length(r)
}
predicted_svm2 = r
predicted = predicted_tree * w1 + predicted_lazy * w2 + predicted_svm2 * w3
p = abs(predicted_svm2 - predicted_lazy)
which.max(p)
f = data.frame(s1 = p)
plot(1:1459, p)
write.table(p, file = "foo.csv", sep = ",", col.names = NA,
qmethod = "double")
write.table(p, file = "foo.csv", sep = ",", col.names = c('Id', 'SalePrice'),
qmethod = "double")
write.table(p, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double")
write.table(p, file = "foo.csv", sep = ",", col.names = c('Id', 'd '),
qmethod = "double")
write.table(p, file = "foo.csv", sep = ",", col.names = c('Id', 'd '),
qmethod = "double", quote = FALSE)
write.table(p, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double", quote = FALSE)
row.names(p) <- row.names(p) + 1460
f = data.frame(s1 = p)
View(f)
row.names(f) <- row.names(f) + 1460
write.table(p, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double", quote = FALSE)
write.table(p,row.names=1:1459, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double", quote = FALSE)
write.table(p,row.names=2:1460, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double", quote = FALSE)
write.table(p,row.names=1461:2919, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double", quote = FALSE)
write.table(predicted,row.names=1461:2919, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double", quote = FALSE)
test_raw = read.csv("./test.csv", header = TRUE)
test = feature_filter_without_saleprice(test_raw)
prediction = test
predicted_tree = predict(tree_model, prediction)
prediction = test
predicted_lazy = predict(lazy_model, prediction)[[1]]  #[[1]] since lazy package implementation returns the result as a list containing a vector as the first element
typeof(2.0)
r = c()
last = 0
for (i in 1:1459)
{
prediction = test[i, ]
predicted_svm = predict(svm_model, prediction)
if (TRUE)
{
#print(i)
#print(predicted_svm)
r = c(r, predicted_svm)
if (length(r) != last + 1)
{
r = c(r, 200000)
}
}
last = length(r)
}
predicted_svm2 = r
predicted = predicted_tree * w1 + predicted_lazy * w2 + predicted_svm2 * w3
p = abs(predicted_svm2 - predicted_lazy)
which.max(p)
f = data.frame(s1 = p)
plot(1:1459, p)
write.table(predicted,row.names=1461:2919, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double", quote = FALSE)
p = abs(predicted_svm2 - predicted_lazy)
which.max(p)
f = data.frame(s1 = p)
row.names(f) <- row.names(f) + 1460
plot(1:1459, p)
train = read.csv("./train.csv", header = TRUE)
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
setwd('D:/kaggle')
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
#result dataframe
result = data.frame()
#select every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
#print the selected features
print(result)
return(result)
}
#load the train data
train = read.csv("./train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
View(train)
library(FSelector)   #load the feature-selection library
setwd('D:/kaggle')
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
#result dataframe
result = data.frame()
row_names = row.names(result)
#select every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
#print the selected features
print(result)
return(result)
}
#load the train data
train = read.csv("./train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
result = data.frame()
result = data.frame()
debugSource('D:/kaggle/feature-selection.R')
View(data)
View(features)
source('D:/kaggle/feature-selection.R')
newdata <- features[order(feature_name),]
source('D:/kaggle/feature-selection.R')
library(FSelector)   #load the feature-selection library
setwd('D:/kaggle')  #TO-MODIFY sets the defaul folder depending on the directory path!!!
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
#result dataframe
result = data.frame()
row_names = row.names(features)
#select every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
#print the selected features
print(result)
return(result)
}
#load the train data
train = read.csv("./train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
View(train)
version()
version
