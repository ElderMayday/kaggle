train = feature_filter(train_raw)
model = nnet(SalePrice~., train, size = 3)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
View(prediction)
library(nnet)
#Filters the train dataframe
#Only higher than 0.1 IG features were selected
#Non-numeric and sparse features are however excluded since in is uneffective
#LotFrontage excluded because of NaN values
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, GarageYrBlt, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1, MasVnrArea,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = nnet(SalePrice~., train, size = 10)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
View(prediction)
library(tree)
#Filters the train dataframe
#Only higher than 0.1 IG features were selected
#PoolQC, Fence and MiscFeature are however excluded since in is uneffective (sparse actual values - the information gain could be random)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, Neighborhood, Alley, GrLivArea,
GarageCars, GarageArea, YearBuilt, ExterQual, KitchenQual, TotalBsmtSF, BsmtQual, MSSubClass,
X1stFlrSF, FullBath, GarageYrBlt, GarageFinish, FireplaceQu, YearRemodAdd, Foundation,
LotFrontage, GarageType, TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
Exterior1st, Exterior2nd, HeatingQC, BsmtFinType1, BsmtFinSF1, MSZoning, MasVnrArea, MasVnrType,
HouseStyle, OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = tree(SalePrice~., train, minsize = 5, mindev = 0)
plot(model)
text(model)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
View(prediction)
library(nnet)
#Filters the train dataframe
#Only higher than 0.1 IG features were selected
#Non-numeric and sparse features are however excluded since in is uneffective
#LotFrontage excluded because of NaN values
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, GarageYrBlt, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1, MasVnrArea,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = nnet(SalePrice~., train, size = 6, decay = 0.1, maxit = 1000)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
View(prediction)
library(lazy)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, GarageYrBlt, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1, MasVnrArea,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL,
distance=c("manhattan","euclidean"), metric=NULL,
cmbPar=1, lambda=1e+06)
model = lazy(SalePrice~., train,control=con)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
View(prediction)
library(lazy)
#Filters the train dataframe
#Only higher than 0.1 IG features were selected
#Non-numeric and sparse features are however excluded since in is uneffective
#LotFrontage excluded because of NaN values
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, GarageYrBlt, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1, MasVnrArea,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL,
distance=c("manhattan","euclidean"), metric=NULL,
cmbPar=1, lambda=1e+06)
model = lazy(SalePrice~., train,control=con)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
View(train)
library(lazy)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, GarageYrBlt, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1, MasVnrArea,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL,
distance=c("manhattan","euclidean"), metric=NULL,
cmbPar=1, lambda=1e+06)
model = lazy(SalePrice~., train,control=con)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
library(lazy)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1, MasVnrArea,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL,
distance=c("manhattan","euclidean"), metric=NULL,
cmbPar=1, lambda=1e+06)
model = lazy(SalePrice~., train,control=con)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
View(train)
View(prediction)
library(lazy)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL,
distance=c("manhattan","euclidean"), metric=NULL,
cmbPar=1, lambda=1e+06)
model = lazy(SalePrice~., train,control=con)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
library(lazy)
#Filters the train dataframe
#Only higher than 0.1 IG features were selected
#Non-numeric and sparse features are however excluded since in is uneffective
#LotFrontage and GarageYrBlt and MasVnrArea excluded because of NaN values
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL,
distance=c("manhattan","euclidean"), metric=NULL,
cmbPar=1, lambda=1e+05)
model = lazy(SalePrice~., train,control=con)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
library(lazy)
#Filters the train dataframe
#Only higher than 0.1 IG features were selected
#Non-numeric and sparse features are however excluded since in is uneffective
#LotFrontage and GarageYrBlt and MasVnrArea excluded because of NaN values
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL,
distance=c("manhattan","euclidean"), metric=NULL,
cmbPar=1, lambda=1e+02)
model = lazy(SalePrice~., train,control=con)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
library(lazy)
#Filters the train dataframe
#Only higher than 0.1 IG features were selected
#Non-numeric and sparse features are however excluded since in is uneffective
#LotFrontage and GarageYrBlt and MasVnrArea excluded because of NaN values
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL,
distance=c("manhattan","euclidean"), metric=NULL,
cmbPar=1, lambda=1e+03)
model = lazy(SalePrice~., train,control=con)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
library(lazy)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = lazy(SalePrice~., train,control=con)   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
library(lazy)
library(tree)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = tree(SalePrice~., train,control=con)   #lazy
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = tree(SalePrice~., train)   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
View(prediction)
library(lazy)
library(tree)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = tree(SalePrice~., train)   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = lazy(SalePrice~., train,control=con)   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = tree(SalePrice~., train, con=tree.control(nobs, mincut = 5, minsize = 10, mindev = 0.01))   #lazy
model = tree(SalePrice~., train, con=tree.control(mincut = 5, minsize = 10, mindev = 0.01))   #lazy
model = tree(SalePrice~., train, con=tree.control(nobs = 10, mincut = 5, minsize = 10, mindev = 0.01))   #lazy
model = tree(SalePrice~., train, con=tree.control(nobs = 1000, mincut = 5, minsize = 10, mindev = 0.01))   #lazy
model = tree(SalePrice~., train, con=tree.control(nobs = 10000, mincut = 5, minsize = 10, mindev = 0.01))   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
rmse = sqrt(mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
print(rmse)
View(prediction)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = lazy(SalePrice~., train,control=con)   #lazy
model = tree(SalePrice~., train, con=tree.control(nobs = 10000, mincut = 5, minsize = 10, mindev = 0.01))   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
mse = mean(prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2
View(prediction)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = tree(SalePrice~., train, con=tree.control(nobs = 10000, mincut = 5, minsize = 10, mindev = 0.01))   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = lazy(SalePrice~., train,control=con)   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = tree(SalePrice~., train, con=tree.control(nobs = 10000, mincut = 5, minsize = 2, mindev = 0))   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = tree(SalePrice~., train, con=tree.control(nobs = 10000, mincut = 1, minsize = 2, mindev = 0))   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = nnet(SalePrice~., train, size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
library(nnet)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = nnet(SalePrice~., train, size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
install.packages("e1071")
library(e1071)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=2)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=3)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=10)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=10, coef0 = 10)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=10, coef0 = 1000)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=10, nu = 0.7)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=10, nu = 0.9)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=10, nu = 0.9, cachesize = 40, tolerance = 0.001, epsilon = 0.1)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = svm(SalePrice~., train, degree=10, nu = 0.9, cachesize = 100, tolerance = 0.1, epsilon = 0.5)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
