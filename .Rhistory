qmethod = "double", quote = FALSE)
c(1461:2919)
write.table(predicted,row.names = rows, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double", quote = FALSE)
rows = c(1461:2919)
write.table(predicted,row.names = rows, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double", quote = FALSE)
rows = 1461:2919
write.table(predicted,row.names = rows, file = "foo.csv", sep = ",", col.names = 'Id',
qmethod = "double", quote = FALSE)
write.table(predicted, row.names = 1, file = "foo.csv", sep = ",", col.names = 'Id', qmethod = "double", quote = FALSE)
write.table(predicted, row.names = '1', file = "foo.csv", sep = ",", col.names = 'Id', qmethod = "double", quote = FALSE)
predicted = data.frame(Id = c(1461:2919), SalePrice = predicted)
predicted = predicted_tree * w1 + predicted_lazy * w2 + predicted_svm * w3
write.table(predicted, row.names = c(1461:2919), file = "foo.csv", sep = ",", col.names = 'Id', qmethod = "double", quote = FALSE)
write.table(predicted, row.names = c(1461:2919), file = "foo.csv", sep = ",", col.names = c('Id', '2'), qmethod = "double", quote = FALSE)
write.table(c(c(1461:2919), predicted), row.names = c(1461:2919), file = "foo.csv", sep = ",", col.names = c('Id', '2'), qmethod = "double", quote = FALSE)
write.table(predicted, row.names = c(1461:2919), file = "foo.csv", sep = ",", col.names = 'Id', qmethod = "double", quote = FALSE)
write.table(predicted, row.names = c(1461:2919), file = "foo.csv", sep = ",", col.names = 'Id,SalePrice', qmethod = "double", quote = FALSE)
version
library(lazy)
library(tree)
library(e1071)
library(stats)
setwd('D:/kaggle')  #TO-MODIFY sets the defaul folder depending on the directory path!!!
source("parameters.R")
source("split-folds.R")
source("feature-filter.R")
evaluate <- function(prediction)
{
return(mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2))
}
cross_validation <- function(folds, model_flag, param)
{
mse_all = c()
iteration = 1
while (iteration <= length(folds))
{
test = folds[[iteration]]
train = data.frame()
fold_num = 1
while (fold_num <= length(folds))
{
if (fold_num != iteration)
train <- rbind(train, folds[[fold_num]])
fold_num = fold_num + 1
}
model = teach_model(train, model_flag, param)
prediction = test[,1:(ncol(test)-1)]
predicted = predict(model, prediction)
mse = mean((predicted[[1]] - test[,"SalePrice"])^2)
mse_all = c(mse_all, mse)
iteration = iteration + 1
}
return(sqrt(mse))
}
teach_model <- function(train, model_flag, param)
{
if (model_flag == 1)
{
model = tree(SalePrice~., train, control = tree.control(nobs = param[1, 'nobs'], mincut = param[1, 'mincut'], minsize = param[1, 'minsize'], mindev = param[1, 'mindev']))
}
else if (model_flag == 2)
{
model = lazy(SalePrice~., train, control = lazy.control(conIdPar=NULL, linIdPar=param[1, 'linIdPar'], quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=param[1, 'lambda']))
}
else if (model_flag == 3)
{
model = svm(SalePrice~., train, degree=param[1, 'degree'], nu=param[1, 'nu'], cachesize = 100, tolerance=param[1, 'tolerance'], epsilon=param[1, 'epsilon'])
}
return(model)
}
select_model <- function(train, model_flag, param)
{
folds = split_folds(train)
rmse_all = c()
for (i in 1:nrow(param))
{
print(i)
rmse = cross_validation(folds, model_flag, param[i, ])
rmse_all = c(rmse_all, rmse)
}
min_index = which.min(rmse_all)
min_value = min(rmse_all)
return(c(min_index, min_value))
}
train_raw = read.csv("./train.csv", header = TRUE)   #stringsAsFactors is necessary to remove NAs
train = feature_filter(train_raw)
train = reassign_factors(train, train)
train = replace_na(train)
tree_parameters = get_tree_parameters()
result_tree = select_model(train, 1, tree_parameters)
train_raw = read.csv("./train.csv", header = TRUE)   #stringsAsFactors is necessary to remove NAs
train = feature_filter(train_raw)
train = reassign_factors(train, train)
train = replace_na(train)
tree_parameters = get_tree_parameters()
result_tree = select_model(train, 1, tree_parameters)
print('tree_index = ')
print(result_tree[1])
print('tree_rmse = ')
print(result_tree[2])
lazy_parameters = get_lazy_parameters()
result_lazy = select_model(train, 2, lazy_parameters)
con=lazy.control(conIdPar=NULL, linIdPar=1, quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=1, lambda=1e+03)
model = lazy(SalePrice~., train,control=con)   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
model = tree(SalePrice~., train, con=tree.control(nobs = 10000, mincut = 1, minsize = 2, mindev = 0))   #lazy
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
model = svm(SalePrice~., train, degree=10, nu = 0.9, cachesize = 100, tolerance = 0.1, epsilon = 0.5)
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
library(lazy)
library(tree)
library(e1071)
setwd('D:/kaggle')  #TO-MODIFY sets the defaul folder depending on the directory path!!!
source("parameters.R")
source("feature-filter.R")
train_raw = read.csv("./train.csv", header = TRUE)   #stringsAsFactors is necessary to remove NAs
train = feature_filter(train_raw)
train = reassign_factors(train, train)
train = replace_na(train)
tree_conf_id = 325
lazy_conf_id = 4
svm_conf_id = 81
tree_parameters = get_tree_parameters()[tree_conf_id,]
lazy_parameters = get_lazy_parameters()[lazy_conf_id,]
svm_parameters = get_svm_parameters()[svm_conf_id,]
rmse_tree = 84761
rmse_lazy = 27741
rmse_svm = 91465
p1 = 1 / rmse_tree
p2 = 1/ rmse_lazy
p3 = 1/ rmse_svm
s = p1 + p2 + p3
w1 = p1 / s
w2 = p2 / s
w3 = p3 / s
tree_model = teach_model(train, 1, tree_parameters)
lazy_model = teach_model(train, 2, lazy_parameters)
svm_model = teach_model(train, 3, svm_parameters)
prediction = train[,1:(ncol(train)-1)]
predicted_tree = predict(tree_model, prediction)
prediction = train[,1:(ncol(train)-1)]
predicted_lazy = predict(lazy_model, prediction)[[1]]  #[[1]] since lazy package implementation returns the result as a list containing a vector as the first element
prediction = train[,1:(ncol(train)-1)]
predicted_svm = predict(svm_model, prediction)
predicted = predicted_tree * w1 + predicted_lazy * w2 + predicted_svm * w3
mse = mean((predicted - train[,'SalePrice'])^2)
rmse = sqrt(mse)
test_raw = read.csv("./test.csv", header = TRUE)
train_raw = read.csv("./train.csv", header = TRUE)   #stringsAsFactors is necessary to remove NAs
train = feature_filter(train_raw)
test = feature_filter_without_saleprice(test_raw)
test = reassign_factors(train, test)
test = replace_na(test)
prediction = test
predicted_tree = predict(tree_model, prediction)
prediction = test
predicted_lazy = predict(lazy_model, prediction)[[1]]  #[[1]] since lazy package implementation returns the result as a list containing a vector as the first element
prediction = test
predicted_svm = predict(svm_model, prediction)
predicted = predicted_tree * w1 + predicted_lazy * w2 + predicted_svm * w3
write.table(predicted, row.names = c(1461:2919), file = "foo.csv", sep = ",", col.names = 'Id,SalePrice', qmethod = "double", quote = FALSE)
View(lazy_parameters)
lazy_parameters = get_lazy_parameters()
View(lazy_parameters)
select_model <- function(train, model_flag, param)
{
folds = split_folds(train)
rmse_all = c()
for (i in 1:nrow(param))
{
print(i)
rmse = cross_validation(folds, model_flag, param[i, ])
rmse_all = c(rmse_all, rmse)
}
min_index = which.min(rmse_all)
min_value = min(rmse_all)
param[,'rmse'] = rmse_all
return(param)
}
train_raw = read.csv("./train.csv", header = TRUE)   #stringsAsFactors is necessary to remove NAs
train = feature_filter(train_raw)
train = reassign_factors(train, train)
train = replace_na(train)
tree_parameters = get_tree_parameters()
result_tree = select_model(train, 1, tree_parameters)
View(result_tree)
group = aggregate(train[,c('SalePrice')], list(result_tree$nobs), mean)
group = aggregate(result_tree[,c('rmse')], list(result_tree$nobs), mean)
View(group)
group = group[order(group$x),]
View(group)
group = aggregate(result_tree[,c('rmse')], list(result_tree$mincut), mean)
group = group[order(group$x),]
View(group)
group = aggregate(result_tree[,c('rmse')], list(result_tree$mincut), mean)
View(group)
plot(group[,1],group[,2])
group = aggregate(result_tree[,c('rmse')], list(result_tree$minsize), mean)
plot(group[,1],group[,2])
View(group)
group = aggregate(result_tree[,c('rmse')], list(result_tree$mindev), mean)
plot(group[,1],group[,2])
View(group)
setwd('D:/kaggle')  #TO-MODIFY sets the defaul folder depending on the directory path!!!
source("parameters.R")
source("split-folds.R")
source("feature-filter.R")
train_raw = read.csv("./train.csv", header = TRUE)   #stringsAsFactors is necessary to remove NAs
train = feature_filter(train_raw)
train = reassign_factors(train, train)
train = replace_na(train)
tree_parameters = get_tree_parameters()
result_tree = select_model(train, 1, tree_parameters)
View(tree_parameters)
View(result_tree)
group = aggregate(result_tree[,c('rmse')], list(result_tree$nobs), mean)
group = group[order(group$x),]
group = group[order(group$x),]
group = aggregate(result_tree[,c('rmse')], list(result_tree$nobs), mean)
View(group)
plot(group[,1],group[,2])
group = aggregate(result_tree[,c('rmse')], list(result_tree$mincut), mean)
plot(group[,1],group[,2])
View(group)
group = aggregate(result_tree[,c('rmse')], list(result_tree$minsize), mean)
plot(group[,1],group[,2])
View(group)
group = aggregate(result_tree[,c('rmse')], list(result_tree$mindev), mean)
plot(group[,1],group[,2])
View(group)
train_raw = read.csv("./train.csv", header = TRUE)   #stringsAsFactors is necessary to remove NAs
train = feature_filter(train_raw)
train = reassign_factors(train, train)
train = replace_na(train)
tree_parameters = get_tree_parameters()
result_tree = select_model(train, 1, tree_parameters)
group = aggregate(result_tree[,c('rmse')], list(result_tree$nobs), mean) #no affect
plot(group[,1],group[,2])
View(group)
setwd('D:/kaggle')  #TO-MODIFY sets the defaul folder depending on the directory path!!!
source("parameters.R")
source("split-folds.R")
source("feature-filter.R")
train_raw = read.csv("./train.csv", header = TRUE)   #stringsAsFactors is necessary to remove NAs
train = feature_filter(train_raw)
train = reassign_factors(train, train)
train = replace_na(train)
tree_parameters = get_tree_parameters()
result_tree = select_model(train, 1, tree_parameters)
group = aggregate(result_tree[,c('rmse')], list(result_tree$nobs), mean) #no affect
plot(group[,1],group[,2])
group = aggregate(result_tree[,c('rmse')], list(result_tree$mincut), mean)
plot(group[,1],group[,2])
group = aggregate(result_tree[,c('rmse')], list(result_tree$minsize), mean)
plot(group[,1],group[,2])
group = aggregate(result_tree[,c('rmse')], list(result_tree$mindev), mean)
plot(group[,1],group[,2])
print('tree_index = ')
print(which.min(result_tree[,'rmse']))
print('tree_rmse = ')
print(min(result_tree[,'rmse']))
View(result_tree)
lazy_parameters = get_lazy_parameters()
View(lazy_parameters)
lazy_parameters = get_lazy_parameters()
View(lazy_parameters)
source("parameters.R")
lazy_parameters = get_lazy_parameters()
result_lazy = select_model(train, 2, lazy_parameters)
setwd('D:/kaggle')  #TO-MODIFY sets the defaul folder depending on the directory path!!!
source("parameters.R")
source("split-folds.R")
source("feature-filter.R")
lazy_parameters = get_lazy_parameters()
result_lazy = select_model(train, 2, lazy_parameters)
View(lazy_parameters)
lazy_parameters = get_lazy_parameters()
result_lazy = select_model(train, 2, lazy_parameters)
View(result_lazy)
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$cmbPar), mean)
plot(group[,1],group[,2])
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$lambda), mean)
plot(group[,1],group[,2])
print('lazy_index = ')
print(which.min(result_lazy[,'rmse']))
print('lazy_rmse = ')
print(min(result_lazy[,'rmse']))
library(tree)
library(e1071)
library(stats)
setwd('D:/kaggle')  #TO-MODIFY sets the defaul folder depending on the directory path!!!
source("parameters.R")
source("split-folds.R")
source("feature-filter.R")
evaluate <- function(prediction)
{
return(mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2))
}
cross_validation <- function(folds, model_flag, param)
{
mse_all = c()
iteration = 1
while (iteration <= length(folds))
{
test = folds[[iteration]]
train = data.frame()
fold_num = 1
while (fold_num <= length(folds))
{
if (fold_num != iteration)
train <- rbind(train, folds[[fold_num]])
fold_num = fold_num + 1
}
model = teach_model(train, model_flag, param)
prediction = test[,1:(ncol(test)-1)]
predicted = predict(model, prediction)
mse = mean((predicted[[1]] - test[,"SalePrice"])^2)
mse_all = c(mse_all, mse)
iteration = iteration + 1
}
return(sqrt(mse))
}
teach_model <- function(train, model_flag, param)
{
if (model_flag == 1)
{
model = tree(SalePrice~., train, control = tree.control(nobs = param[1, 'nobs'], mincut = param[1, 'mincut'], minsize = param[1, 'minsize'], mindev = param[1, 'mindev']))
}
else if (model_flag == 2)
{
model = lazy(SalePrice~., train, control = lazy.control(conIdPar=NULL, linIdPar=param[1, 'linIdPar'], quaIdPar=NULL, distance=c("manhattan","euclidean"), metric=NULL, cmbPar=param[1, 'cmbPar'], lambda=param[1, 'lambda']))
}
else if (model_flag == 3)
{
model = svm(SalePrice~., train, degree=param[1, 'degree'], nu=param[1, 'nu'], cachesize = 100, tolerance=param[1, 'tolerance'], epsilon=param[1, 'epsilon'])
}
return(model)
}
select_model <- function(train, model_flag, param)
{
folds = split_folds(train)
rmse_all = c()
for (i in 1:nrow(param))
{
print(i)
rmse = cross_validation(folds, model_flag, param[i, ])
rmse_all = c(rmse_all, rmse)
}
min_index = which.min(rmse_all)
min_value = min(rmse_all)
param[,'rmse'] = rmse_all
return(param)
}
lazy_parameters = get_lazy_parameters()
result_lazy = select_model(train, 2, lazy_parameters)
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$cmbPar), mean)
plot(group[,1],group[,2])
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$lambda), mean)
plot(group[,1],group[,2])
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$cmbPar), mean)
plot(group[,1],group[,2])
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$lambda), mean)
plot(group[,1],group[,2])
source("parameters.R")
source("split-folds.R")
source("feature-filter.R")
lazy_parameters = get_lazy_parameters()
View(lazy_parameters)
result_lazy = select_model(train, 2, lazy_parameters)
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$cmbPar), mean)
plot(group[,1],group[,2])
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$lambda), mean)
plot(group[,1],group[,2])
svm_parameters = get_svm_parameters()
View(svm_parameters)
result_svm = select_model(train, 3, svm_parameters)
View(group)
View(result_svm)
group = aggregate(result_svm[,c('rmse')], list(result_svm$linIdPar), mean)
View(result_svm)
group = aggregate(result_svm[,c('rmse')], list(result_svm$degree), mean)
plot(group[,1],group[,2])
group = aggregate(result_svm[,c('rmse')], list(result_svm$nu), mean)
plot(group[,1],group[,2])
group = aggregate(result_svm[,c('rmse')], list(result_svm$tolerance), mean)
plot(group[,1],group[,2])
group = aggregate(result_svm[,c('rmse')], list(result_svm$epsilon), mean)
plot(group[,1],group[,2])
group = aggregate(result_tree[,c('rmse')], list(result_tree$nobs), mean) #no affect
plot(group[,1],group[,2])
group = aggregate(result_tree[,c('rmse')], list(result_tree$mincut), mean)
plot(group[,1],group[,2])
group = aggregate(result_tree[,c('rmse')], list(result_tree$minsize), mean)
plot(group[,1],group[,2])
group = aggregate(result_tree[,c('rmse')], list(result_tree$mindev), mean)
plot(group[,1],group[,2])
group = aggregate(result_tree[,c('rmse')], list(result_tree$mincut), mean)  # ~10
plot(group[,1],group[,2])
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$cmbPar), mean)
plot(group[,1],group[,2])
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$lambda), mean)
plot(group[,1],group[,2])
source("parameters.R")
source("split-folds.R")
source("feature-filter.R")
lazy_parameters = get_lazy_parameters()
result_lazy = select_model(train, 2, lazy_parameters)
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$cmbPar), mean)  #3
plot(group[,1],group[,2])
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$lambda), mean)  #100
plot(group[,1],group[,2])
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$cmbPar), mean)  #3
plot(group[,1],group[,2])
group = aggregate(result_lazy[,c('rmse')], list(result_lazy$lambda), mean)  #100
plot(group[,1],group[,2])
group = aggregate(result_svm[,c('rmse')], list(result_svm$degree), mean)
plot(group[,1],group[,2])
group = aggregate(result_svm[,c('rmse')], list(result_svm$nu), mean)
plot(group[,1],group[,2])
group = aggregate(result_svm[,c('rmse')], list(result_svm$tolerance), mean)
plot(group[,1],group[,2])
group = aggregate(result_svm[,c('rmse')], list(result_svm$tolerance), mean)   #0.001
plot(group[,1],group[,2])
group = aggregate(result_svm[,c('rmse')], list(result_svm$epsilon), mean)
plot(group[,1],group[,2])
print('tree_index = ')
print(which.min(result_tree[,'rmse']))
print('tree_rmse = ')
print(min(result_tree[,'rmse']))
print('lazy_index = ')
print(which.min(result_lazy[,'rmse']))
print('lazy_rmse = ')
print(min(result_lazy[,'rmse']))
print('svm_index = ')
print(which.min(result_svm[,'rmse']))
print('svm_rmse = ')
print(min(result_svm[,'rmse']))
library(lazy)
library(tree)
library(e1071)
setwd('D:/kaggle')  #TO-MODIFY sets the defaul folder depending on the directory path!!!
source("parameters.R")
source("feature-filter.R")
train_raw = read.csv("./train.csv", header = TRUE)   #stringsAsFactors is necessary to remove NAs
train = feature_filter(train_raw)
train = reassign_factors(train, train)
train = replace_na(train)
tree_conf_id = 54
lazy_conf_id = 18
svm_conf_id = 1
tree_parameters = get_tree_parameters()[tree_conf_id,]
lazy_parameters = get_lazy_parameters()[lazy_conf_id,]
svm_parameters = get_svm_parameters()[svm_conf_id,]
rmse_tree = 84761
rmse_tree = 71361
rmse_lazy = 30307
rmse_svm = 116588
p1 = 1 / rmse_tree
p2 = 1/ rmse_lazy
p3 = 1/ rmse_svm
s = p1 + p2 + p3
w1 = p1 / s
w2 = p2 / s
w3 = p3 / s
tree_model = teach_model(train, 1, tree_parameters)
lazy_model = teach_model(train, 2, lazy_parameters)
svm_model = teach_model(train, 3, svm_parameters)
prediction = train[,1:(ncol(train)-1)]
predicted_tree = predict(tree_model, prediction)
prediction = train[,1:(ncol(train)-1)]
predicted_lazy = predict(lazy_model, prediction)[[1]]  #[[1]] since lazy package implementation returns the result as a list containing a vector as the first element
prediction = train[,1:(ncol(train)-1)]
predicted_svm = predict(svm_model, prediction)
predicted = predicted_tree * w1 + predicted_lazy * w2 + predicted_svm * w3
mse = mean((predicted - train[,'SalePrice'])^2)
rmse = sqrt(mse)
test_raw = read.csv("./test.csv", header = TRUE)
train_raw = read.csv("./train.csv", header = TRUE)   #stringsAsFactors is necessary to remove NAs
test_raw = read.csv("./test.csv", header = TRUE)
train_raw = read.csv("./train.csv", header = TRUE)
train = feature_filter(train_raw)
test = feature_filter_without_saleprice(test_raw)
test = reassign_factors(train, test)
test = replace_na(test)
prediction = test
predicted_tree = predict(tree_model, prediction)
prediction = test
predicted_lazy = predict(lazy_model, prediction)[[1]]  #[[1]] since lazy package implementation returns the result as a list containing a vector as the first element
prediction = test
predicted_svm = predict(svm_model, prediction)
predicted = predicted_tree * w1 + predicted_lazy * w2 + predicted_svm * w3
write.table(predicted, row.names = c(1461:2919), file = "foo.csv", sep = ",", col.names = 'Id,SalePrice', qmethod = "double", quote = FALSE)
