#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
return(result)
}
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result<-data.frame("feature_name" = "a", "feature_gain" = 0.2)
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result<-data.frame("feature_name", "feature_gain")
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
#result<-data.frame("feature_name", "feature_gain")
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
print(row_names[i])
print(features[i, 1]);
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
#result<-data.frame("feature_name", "feature_gain")
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
View(features)
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
features = feature_selector(train)
result = data.frame()
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result = data.frame()
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
result = result[order(2), ]
result = result[order(feature_gain), ]
library(FSelector)   #load the feature-selection library
#takes dataframe and shows the features with satisfactory information gain
feature_selector <- function(data)
{
#calculate the information gain of each feature
features <- information.gain(SalePrice~., data)
result = data.frame()
#print every feature with IF higher than 0.1
for (i in 1:nrow(features))
{
if (features[i, 1] > 0.1)
{
result <- rbind(result, data.frame("feature_name"= row_names[i], "feature_gain" = features[i, 1]))
}
}
print(result)
return(result)
}
#load the train data
train = read.csv("D:\\kaggle\\train.csv", header = TRUE)
#do feature selection
features = feature_selector(train)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
library(lazy)
library(tree)
library(e1071)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
p1 = train[1:100,]
View(train)
View(p1)
p1 = train[1:10,]
p2 = train[11:20,]
View(p1)
View(p2)
vec = c(1,2,3)
vec = c(p1, p2)
vec[1]
v1 = vec[1]
vec = c(p1, p2)
p1 = train[1:10,]
p2 = train[11:20,]
vec = list(p1, p2)
v1 = vec[1]
v1 = vec[[1]]
View(v1)
p1 = train[1:10,]
p2 = train[11:20,]
vec = list(p1, p2)
vec = list(vec, p2)
v1 = vec[[1]]
v1 = vec[[2]]
v1 = vec[[3]]
vec[[3]] = 2
v1 = vec[[3]]
length(vec)
vec[[length(vec) + 1]] = 4
v1 = vec[[4]]
vec[[length(vec) + 1]] = p2
v1 = vec[[5]]
View(v1)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
fold_num = 3
folds1=fold_num % 3
fold_num = 3
folds1=fold_num %% 3
folds1=fold_num%%3
folds1=length(train)
folds1=nrow(train)
folds1 = nrow(train) %% fold_num
current_row = 1
folds = list()
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
bigfold_num = nrow(train) %% fold_num
current_row = 1
folds = list()
current_fold = 1
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + bigfold_num - 1),]
current_fold = current_fold + 1
current_row = current_row + bigfold_num
}
p1 = folds[[1]]
View(p1)
p1 = folds[[2]]
View(p1)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
bigfold_num = nrow(train) %% fold_num
size = nrow(train) %/% fold_num
current_row = 1
folds = list()
current_fold = 1
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + bigfold_num
}
p1 = folds[[2]]
p1 = folds[[1]]
p1 = folds[[2]]
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
bigfold_num = nrow(train) %% fold_num
size = nrow(train) %/% fold_num
current_row = 1
folds = list()
current_fold = 1
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size
}
p1 = folds[[1]]
p1 = folds[[2]]
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
bigfold_num = nrow(train) %% fold_num
size = nrow(train) %/% fold_num
current_row = 1
folds = list()
current_fold = 1
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
p1 = folds[[2]]
smallfold_num = nrow(train) - smallfold_num
smallfold_num = nrow(train) - bigfold_num
smallfold_num = fold_num - bigfold_num
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
size = nrow(train) %/% fold_num
bigfold_num = nrow(train) %% fold_num
smallfold_num = fold_num - bigfold_num
current_row = 1
current_fold = 1
folds = list()
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
current_fold = 1
while (current_fold <= small)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
size = nrow(train) %/% fold_num
bigfold_num = nrow(train) %% fold_num
smallfold_num = fold_num - bigfold_num
current_row = 1
current_fold = 1
folds = list()
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
current_fold = 1
while (current_fold <= smallfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
p1 = folds[[2]]
View(p1)
p1 = folds[[3]]
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 5
size = nrow(train) %/% fold_num
bigfold_num = nrow(train) %% fold_num
smallfold_num = fold_num - bigfold_num
current_row = 1
current_fold = 1
folds = list()
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
current_fold = 1
while (current_fold <= smallfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
p1 = folds[[3]]
p1 = folds[[1]]
p1 = folds[[2]]
p1 = folds[[3]]
p1 = folds[[4]]
p1 = folds[[5]]
library(lazy)
library(tree)
library(e1071)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
split_folds <- function(data, fold_num=5)
{
#the size of a small fold
size = nrow(data) %/% fold_num
#number of (size+1) folds
bigfold_num = nrow(data) %% fold_num
#number of (size) folds
smallfold_num = fold_num - bigfold_num
#current datarow
current_row = 1
#current fold number
current_fold = 1
#the vector of all folds
folds = list()
#bigfold partition loop
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = data[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
#reset the fold counter for the remaining small folds
current_fold = 1
#smallfold partition loop
while (current_fold <= smallfold_num)
{
folds[[length(folds) + 1]] = data[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
return(folds)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
folds = split_folds(train)
p1 = folds[[5]]
dm <- matrix(1:25, ncol = 5); dm
dm[] <- sample(dm); dm
dm <- matrix(1:25, ncol = 5); dm
View(dm)
dm[] <- sample(dm); dm
dm <- matrix(1:25, ncol = 5); dm
df2 <- dm[sample(nrow(dm)),]
View(df2)
library(lazy)
library(tree)
library(e1071)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
split_folds <- function(data_ordered, fold_num=5)
{
data <- data_ordered[sample(nrow(data_ordered)),]
#the size of a small fold
size = nrow(data) %/% fold_num
#number of (size+1) folds
bigfold_num = nrow(data) %% fold_num
#number of (size) folds
smallfold_num = fold_num - bigfold_num
#current datarow
current_row = 1
#current fold number
current_fold = 1
#the vector of all folds
folds = list()
#bigfold partition loop
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = data[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
#reset the fold counter for the remaining small folds
current_fold = 1
#smallfold partition loop
while (current_fold <= smallfold_num)
{
folds[[length(folds) + 1]] = data[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
return(folds)
}
cross_validation <- function(folds, model)
{
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
folds = split_folds(train)
p1 = folds[[1]]
p1 = folds[[5]]
cross_validation <- function(folds, model)
{
iteration = 1
while (iteration <= length(folds))
{
print(iteration)
}
}
cross_validation(4)
cross_validation <- function(folds, model)
{
iteration = 1
while (iteration <= length(folds))
{
print(iteration)
iteration = iteration + 1
}
}
cross_validation(4)
cross_validation(folds, 3)
debugSource('D:/kaggle/model.R')
debugSource('D:/kaggle/model.R')
debugSource('D:/kaggle/model.R')
debugSource('D:/kaggle/model.R')
debugSource('D:/kaggle/model.R')
View(train)
View(train)
View(train)
View(test)
a = data.frame(1:4, 1:5)
a = data.frame(4, 5)
View(a)
b = a
View(a)
View(b)
b[1,1] = 100
View(b)
View(a)
View(b)
View(a)
