train = feature_filter(train_raw)
fold_num = 3
bigfold_num = nrow(train) %% fold_num
current_row = 1
folds = list()
current_fold = 1
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + bigfold_num - 1),]
current_fold = current_fold + 1
current_row = current_row + bigfold_num
}
p1 = folds[[1]]
View(p1)
p1 = folds[[2]]
View(p1)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
bigfold_num = nrow(train) %% fold_num
size = nrow(train) %/% fold_num
current_row = 1
folds = list()
current_fold = 1
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + bigfold_num
}
p1 = folds[[2]]
p1 = folds[[1]]
p1 = folds[[2]]
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
bigfold_num = nrow(train) %% fold_num
size = nrow(train) %/% fold_num
current_row = 1
folds = list()
current_fold = 1
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size
}
p1 = folds[[1]]
p1 = folds[[2]]
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
bigfold_num = nrow(train) %% fold_num
size = nrow(train) %/% fold_num
current_row = 1
folds = list()
current_fold = 1
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
p1 = folds[[2]]
smallfold_num = nrow(train) - smallfold_num
smallfold_num = nrow(train) - bigfold_num
smallfold_num = fold_num - bigfold_num
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
size = nrow(train) %/% fold_num
bigfold_num = nrow(train) %% fold_num
smallfold_num = fold_num - bigfold_num
current_row = 1
current_fold = 1
folds = list()
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
current_fold = 1
while (current_fold <= small)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 3
size = nrow(train) %/% fold_num
bigfold_num = nrow(train) %% fold_num
smallfold_num = fold_num - bigfold_num
current_row = 1
current_fold = 1
folds = list()
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
current_fold = 1
while (current_fold <= smallfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
p1 = folds[[2]]
View(p1)
p1 = folds[[3]]
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
fold_num = 5
size = nrow(train) %/% fold_num
bigfold_num = nrow(train) %% fold_num
smallfold_num = fold_num - bigfold_num
current_row = 1
current_fold = 1
folds = list()
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
current_fold = 1
while (current_fold <= smallfold_num)
{
folds[[length(folds) + 1]] = train[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
p1 = folds[[3]]
p1 = folds[[1]]
p1 = folds[[2]]
p1 = folds[[3]]
p1 = folds[[4]]
p1 = folds[[5]]
library(lazy)
library(tree)
library(e1071)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
split_folds <- function(data, fold_num=5)
{
#the size of a small fold
size = nrow(data) %/% fold_num
#number of (size+1) folds
bigfold_num = nrow(data) %% fold_num
#number of (size) folds
smallfold_num = fold_num - bigfold_num
#current datarow
current_row = 1
#current fold number
current_fold = 1
#the vector of all folds
folds = list()
#bigfold partition loop
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = data[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
#reset the fold counter for the remaining small folds
current_fold = 1
#smallfold partition loop
while (current_fold <= smallfold_num)
{
folds[[length(folds) + 1]] = data[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
return(folds)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
folds = split_folds(train)
p1 = folds[[5]]
dm <- matrix(1:25, ncol = 5); dm
dm[] <- sample(dm); dm
dm <- matrix(1:25, ncol = 5); dm
View(dm)
dm[] <- sample(dm); dm
dm <- matrix(1:25, ncol = 5); dm
df2 <- dm[sample(nrow(dm)),]
View(df2)
library(lazy)
library(tree)
library(e1071)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
split_folds <- function(data_ordered, fold_num=5)
{
data <- data_ordered[sample(nrow(data_ordered)),]
#the size of a small fold
size = nrow(data) %/% fold_num
#number of (size+1) folds
bigfold_num = nrow(data) %% fold_num
#number of (size) folds
smallfold_num = fold_num - bigfold_num
#current datarow
current_row = 1
#current fold number
current_fold = 1
#the vector of all folds
folds = list()
#bigfold partition loop
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = data[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
#reset the fold counter for the remaining small folds
current_fold = 1
#smallfold partition loop
while (current_fold <= smallfold_num)
{
folds[[length(folds) + 1]] = data[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
return(folds)
}
cross_validation <- function(folds, model)
{
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
folds = split_folds(train)
p1 = folds[[1]]
p1 = folds[[5]]
cross_validation <- function(folds, model)
{
iteration = 1
while (iteration <= length(folds))
{
print(iteration)
}
}
cross_validation(4)
cross_validation <- function(folds, model)
{
iteration = 1
while (iteration <= length(folds))
{
print(iteration)
iteration = iteration + 1
}
}
cross_validation(4)
cross_validation(folds, 3)
debugSource('D:/kaggle/model.R')
debugSource('D:/kaggle/model.R')
debugSource('D:/kaggle/model.R')
debugSource('D:/kaggle/model.R')
debugSource('D:/kaggle/model.R')
View(train)
View(train)
View(train)
View(test)
a = data.frame(1:4, 1:5)
a = data.frame(4, 5)
View(a)
b = a
View(a)
View(b)
b[1,1] = 100
View(b)
View(a)
View(b)
View(a)
x<-data.frame(id1=c("a","b","c"),vals1=1:3)
y<-data.frame(id2=c("d","e","f"),vals2=4:6)
merge(x,y,all=TRUE)
x<-data.frame(id1=c("a","b","c"),vals1=1:3)
y<-data.frame(id2=c("d","e","f"),vals2=4:6)
z<-merge(x,y,all=TRUE)
View(x)
View(y)
View(z)
param_tree_1 = data.frame(nobs = 10000)
View(param_tree_1)
param_tree_2 = data.frame(mincut = c(1, 2))
param_tree = merge(param_tree_1, param_tree_2)
View(param_tree)
model = tree(SalePrice~., train, con=tree.control(nobs = 10000, mincut = 1, minsize = 2, mindev = 0))   #lazy
library(lazy)
library(tree)
library(e1071)
feature_filter <- function(input) {
result <- subset(input, select=c(OverallQual, GrLivArea,
GarageCars, GarageArea, YearBuilt, TotalBsmtSF, MSSubClass,
X1stFlrSF, FullBath, YearRemodAdd,
TotRmsAbvGrd, X2ndFlrSF, Fireplaces, LotArea, OpenPorchSF,
BsmtFinSF1,
OverallCond, WoodDeckSF, HalfBath, BsmtUnfSF, SalePrice))
return(result)
}
split_folds <- function(data_ordered, fold_num=5)
{
#permutate the datarows in a random way
data = data_ordered
#data <- data_ordered[sample(nrow(data_ordered)),]    TO-RETURN!!!
#the size of a small fold
size = nrow(data) %/% fold_num
#number of (size+1) folds
bigfold_num = nrow(data) %% fold_num
#number of (size) folds
smallfold_num = fold_num - bigfold_num
#current datarow
current_row = 1
#current fold number
current_fold = 1
#the vector of all folds
folds = list()
#bigfold partition loop
while (current_fold <= bigfold_num)
{
folds[[length(folds) + 1]] = data[current_row:(current_row + size),]
current_fold = current_fold + 1
current_row = current_row + size + 1
}
#reset the fold counter for the remaining small folds
current_fold = 1
#smallfold partition loop
while (current_fold <= smallfold_num)
{
folds[[length(folds) + 1]] = data[current_row:(current_row + size - 1),]
current_fold = current_fold + 1
current_row = current_row + size
}
return(folds)
}
evaluate <- function(prediction)
{
return(mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2))
}
cross_validation <- function(folds, model, model_flag, parameters)
{
iteration = 1
while (iteration <= length(folds))
{
print(iteration)
test = folds[[iteration]]
train = data.frame()
fold_num = 1
while (fold_num <= length(folds))
{
if (fold_num != iteration)
train <- rbind(train, folds[[fold_num]])
fold_num = fold_num + 1
}
iteration = iteration + 1
}
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
folds = split_folds(train)
model = tree(SalePrice~., train, con=tree.control(nobs = 10000, mincut = 1, minsize = 2, mindev = 0))   #lazy
model = tree(SalePrice~., train, con=tree.control(nobs = 10000, mincut = 2, minsize = 2, mindev = 0))   #lazy
model = tree(SalePrice~., train, con=tree.control(nobs = 10000, mincut = 1, minsize = 2, mindev = 0))   #lazy
mincut_vector = (1, 2, 3, 4, 5, 10, 20, 50, 100)
mincut_vector = c(1, 2, 3, 4, 5, 10, 20, 50, 100)
minsize_vector = c(1:10)
param_tree_2 = data.frame(mincut = mincut_vector)
param_tree_3 = data.frame(minsize = minsize_vector)
View(param_tree_2)
View(param_tree_3)
param_tree_4 = merge(param_tree_2, param_tree_3)
View(param_tree_4)
param_tree_4[,'minsize'] = param_tree_4[,'minsize'] * param_tree_4[,'mincut']
minsize_vector = c(2:10)
param_tree_2 = data.frame(mincut = mincut_vector)
param_tree_3 = data.frame(minsize = minsize_vector)
param_tree_4 = merge(param_tree_2, param_tree_3)
param_tree_4[,'minsize'] = param_tree_4[,'minsize'] * param_tree_4[,'mincut']
param_tree_1 = data.frame(nobs = 10000)
mincut_vector = c(1, 2, 3, 4, 5, 10, 20, 50, 100)
minsize_vector = c(2:10)
param_tree_2a = data.frame(mincut = mincut_vector)
param_tree_2b = data.frame(minsize = minsize_vector)
param_tree_2 = merge(param_tree_2a, param_tree_2b)
param_tree_2[,'minsize'] = param_tree_2[,'minsize'] * param_tree_2[,'mincut']
param_tree = merge(param_tree_1, param_tree_2)
View(param_tree_2)
View(param_tree)
param_tree_3 = data.frame(c(0, 0.01, 0.05, 0.10, 0.50))
param_tree = merge(param_tree_1, param_tree_2, param_tree_3)
param_tree = merge(param_tree_1, param_tree_2)
param_tree = merge(param_tree, param_tree3)
param_tree_3 = data.frame(mindev = c(0, 0.01, 0.05, 0.10, 0.50, 1.0, 10.0, 100.0))
param_tree = merge(param_tree_1, param_tree_2)
param_tree = merge(param_tree, param_tree3)
param_tree_3 = data.frame(mindev = c(0, 0.01, 0.05, 0.10, 0.50, 1.0, 10.0, 100.0))
param_tree = merge(param_tree_1, param_tree_2)
param_tree = merge(param_tree, param_tree_3)
tree_parameters = get_free_parameters()
tree_parameters = get_tree_parameters()
get_tree_parameters <- function()
{
param_tree_1 = data.frame(nobs = 10000)
mincut_vector = c(1, 2, 3, 4, 5, 10, 20, 50, 100)
minsize_vector = c(2:10)
param_tree_2a = data.frame(mincut = mincut_vector)
param_tree_2b = data.frame(minsize = minsize_vector)
param_tree_2 = merge(param_tree_2a, param_tree_2b)
param_tree_2[,'minsize'] = param_tree_2[,'minsize'] * param_tree_2[,'mincut']
param_tree_3 = data.frame(mindev = c(0, 0.01, 0.05, 0.10, 0.50, 1.0, 10.0, 100.0))
param_tree = merge(param_tree_1, param_tree_2)
param_tree = merge(param_tree, param_tree_3)
return(param_tree)
}
tree_parameters = get_tree_parameters()
View(tree_parameters)
View(param_tree)
p = parameters[1,]
p = param_tree[1,]
View(p)
p[1]
p[2]
p['nobs']
p['mincut']
teach_model <- function(train, flag, param)
{
if (flag == 1)
{
model = tree(SalePrice~., train, con=tree.control(nobs = param['nobs'], mincut = param['mincut'], minsize = param['minsize'], mindev = param['mindev']))
}
else if (flag == 2)
{
}
else if (flag == 3)
{
}
return(model)
}
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
rm(model)
model = teach_model(train, 1, tree_parameters[1,])
debugSource('D:/kaggle/model.R')
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
model = teach_model(train, 1, tree_parameters[1,])
debugSource('D:/kaggle/model.R')
model = teach_model(train, 1, tree_parameters[1,])
prediction = train[,1:(ncol(train)-1)]
prediction[,"PredictedPrice"] = predict(model, prediction)
prediction[,"RealPrice"] = train[,"SalePrice"]
vec = prediction[,"PredictedPrice"] - prediction[,"RealPrice"]
mse = mean((prediction[,"PredictedPrice"] - prediction[,"RealPrice"])^2)
rmse = sqrt(mse)
print(rmse)
View(prediction)
a = c(1,2)
a = c(a, 3)
debugSource('D:/kaggle/model.R')
a= c()
source('D:/kaggle/model.R')
source('D:/kaggle/model.R')
source('D:/kaggle/model.R')
source('D:/kaggle/model.R')
source('D:/kaggle/model.R')
debugSource('D:/kaggle/model.R')
View(train)
View(prediction)
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
folds = split_folds(train)
tree_parameters = get_tree_parameters()
cross_validation(folds, 1, tree_parameters[1, ])
train_raw = read.csv("D:\\kaggle\\train.csv", header = TRUE)
train = feature_filter(train_raw)
folds = split_folds(train)
tree_parameters = get_tree_parameters()
rmse = cross_validation(folds, 1, tree_parameters[1, ])
debugSource('D:/kaggle/model.R')
for (i in 1:5)
print(i)
rmse_all = c()
for (i in 1:nrow(tree_parameters))
{
rmse = cross_validation(folds, 1, tree_parameters[i, ])
rmse_all = c(rmse_all, rmse)
}
tree_parameters = get_tree_parameters()
rmse_all = c()
for (i in 1:nrow(tree_parameters))
{
rmse = cross_validation(folds, 1, tree_parameters[i, ])
rmse_all = c(rmse_all, rmse)
}
